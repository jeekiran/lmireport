/*
 * JavaBeanDatasourceSet.java
 *
 * Created on 2009年10月14日, 下午3:22
 */

package com.chinacreator.ireport.javabeandatasource;

import it.businesslogic.ireport.plugin.newserverfile.Help;

import java.awt.Color;
import java.awt.Font;
import java.rmi.RemoteException;
import java.util.List;

import javax.swing.AbstractListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import com.chinacreator.ireport.AddedOperator;
import com.chinacreator.ireport.IreportConstant;
import com.chinacreator.ireport.IreportUtil;
import com.chinacreator.ireport.MyReportProperties;
import com.chinacreator.ireport.component.DialogFactory;
import com.chinacreator.ireport.rmi.IndexInfo;
import com.chinacreator.ireport.rmi.IreportRmiClient;

/**
 *
 * @author  Administrator
 */
public class ServerClassesView extends javax.swing.JDialog {
    
    /** Creates new form JavaBeanDatasourceSet */
	public ServerClassesView jb = null;
	public JavaBeanRemoteDataSourceConnectionEditor jbeditor = null;
    public ServerClassesView(JavaBeanRemoteDataSourceConnectionEditor je,java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        jb = this;
        jbeditor = je;
        initComponents();
        jTextField1.requestFocus();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("输入类名进行检索,可使用通配符?和* ");

		jTextField1.setBackground(new java.awt.Color(255, 255, 255));

		jTextField1.getDocument().addDocumentListener(new DocumentListener() {

			public void changedUpdate(DocumentEvent e) {
				jTextField1TextChanged(e);
			}

			public void insertUpdate(DocumentEvent e) {
				jTextField1TextChanged(e);
			}

			public void removeUpdate(DocumentEvent e) {
				jTextField1TextChanged(e);
			}

		});

        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
       

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("类全名"));

      /*  jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });*/
        
        jList1
		.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(
					javax.swing.event.ListSelectionEvent evt) {
				jList1ValueChanged(evt);
			}
		});

		jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		jList1.setFont(new Font("Dialog", Font.PLAIN, 12));
		
		
        jScrollPane1.setViewportView(jList1);

        jLabel2.setText("类名");

        jTextField2.setEditable(false);

        jButton2.setText("关闭");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("确定");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton5.setText("重新建立索引");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jLabel4.setText("");

        jLabel5.setText("");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 273, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(38, 38, 38)
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 178, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(jButton5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                .add(180, 180, 180)
                                .add(jButton3)
                                .add(10, 10, 10)
                                .add(jButton2))
                            .add(jTextField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton5)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 18, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jButton3)
                    .add(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {
		// TODO add your handling code here:类值变化
		try {
			String classname = (String) jList1.getSelectedValue();
			if (classname != null && classname.indexOf("-") != -1) {
				jTextField2.setText(classname.split("\\s\\-\\s")[1]);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			
		}
		

	}



	private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:重建索引
		IreportRmiClient.getInstance();
		try {
			jLabel4.setForeground(Color.BLACK);
			IndexInfo info = IreportRmiClient.rmiInterfactRemote.indexInfo();
			if (info == null) {
				int i = DialogFactory.showConfirmDialog(this, "第一次创建索引，是否继续？",
						"新建索引", JOptionPane.INFORMATION_MESSAGE);
				if (i != JOptionPane.OK_OPTION) {
					return;
				}
			} else {
				int i = DialogFactory.showConfirmDialog(this, "上次索引信息\n"
						+ "索引于IP：" + info.getIp() + "\n" + "创建时间："
						+ info.getCreatetime() + "\n" + "被索引的文件位置(服务器)："
						+ info.getClassesdir() + "\n" + "索引存放位置(服务器)："
						+ info.getIndexdir() + "\n" + "\n是否重建索引？", "重建索引",
						JOptionPane.INFORMATION_MESSAGE);
				if (i != JOptionPane.OK_OPTION) {
					return;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			AddedOperator.log("获取索引信息错误：" + e.getMessage(),
					IreportConstant.ERROR_);
		}

		try {

			new Thread(new Runnable() {

				public void run() {
					// TODO Auto-generated method stub
					boolean b = false;
					try {
						b = IreportRmiClient.rmiInterfactRemote.generateIndex();
						if (!b) {
							// 0个索引文件
							AddedOperator.log("索引到0个文件..可能你的路径配置错误，请查看服务端输出信息",
									IreportConstant.WARN_);

						} else {
							AddedOperator.log("新建索引成功", IreportConstant.RIGHT_);
						}
					} catch (RemoteException e) {
						e.printStackTrace();
						AddedOperator.log("新建索引错误：" + e.getMessage(),
								IreportConstant.ERROR_);
						DialogFactory.showErrorMessageDialog(jb,
								e.getMessage(), "新建索引错误");
						throw new RuntimeException(e.getMessage());
					}

				}
			}).start();

			final Thread pt = new Thread(new Runnable() {

				public void run() {
					try {
						java.text.NumberFormat nf = java.text.NumberFormat
								.getPercentInstance();
						nf.setMinimumFractionDigits(0);// 小数点后保留几位
						while (true) {
							int[] pp = null;
							try {
								pp = IreportRmiClient.rmiInterfactRemote
										.indexProgress();
							} catch (RemoteException e) {
								e.printStackTrace();
								AddedOperator.log("获取索引进度错误",
										IreportConstant.ERROR_);
							}

							String str = null;
							
							if (pp!=null && pp[1] != 0 && pp[0] != 0 && pp[1] >= pp[0]) {
								str = "100%";
							} else {
								if(nf!=null){
								str = nf.format(new Double(pp[1]).doubleValue()
										/ new Double(pp[0]).doubleValue());// 要转化的数
								}
							}

							jb.jLabel4.setText("正在创建索引..." + str);
							if ("100%".equals(str)) {
								break;
								// Thread.currentThread().interrupt();
							}
						}
						try {
							jb.jLabel4.setText("索引创建完毕 100%");
							jb.jLabel4.setForeground(new Color(0,0,0));
							int i = 0;
							while (true) {
								Thread.sleep(20);
								Color c = new Color(i, i, i);
								jb.jLabel4.setForeground(c);
								if (i == 254) {
									jb.jLabel4.setText("");
									break;
								}
								++i;
							}
						} catch (Exception ex) {
							ex.printStackTrace();
						}
					} catch (Exception e) {
						e.printStackTrace();
						AddedOperator.log("获取索引进度错误", IreportConstant.ERROR_);
					}
				}

			});
			pt.start();

			// jLabel4.setText("完成");
			// AddedOperator.log("新建索引成功", IreportConstant.RIGHT_);
		} catch (Exception e) {
			/*try {
				if(processThread!=null){
				processThread.interrupt();
				}
			} catch (Exception ex) {
			}*/
			jLabel4.setText("创建索引失败！");
			AddedOperator.log("新建索引错误：" + e.getMessage(),
					IreportConstant.ERROR_);
			DialogFactory
					.showErrorMessageDialog(this, e.getMessage(), "新建索引错误");
		}
	}

	private void jTextField1TextChanged(DocumentEvent e) {
		// TODO add your handling code here:搜索框值变化
		String search = jTextField1.getText();
		if (IreportUtil.isBlank(search)) {
			jList1.setModel(new javax.swing.AbstractListModel() {
				public int getSize() {
					return 0;
				}

				public Object getElementAt(int i) {
					return null;
				}
			});

			jLabel5.setText("");
			return;
		}

		List<String> lists;
		try {
			// lists = Searcher.searchToArray(new File("F:/index"), search);
			IreportRmiClient.getInstance();
			lists = IreportRmiClient.rmiInterfactRemote.searchIndex(search);
			if (lists == null || lists.size() == 0) {
				jList1.setModel(new javax.swing.AbstractListModel() {
					public int getSize() {
						return 0;
					}

					public Object getElementAt(int i) {
						return null;
					}
				});
				jLabel5.setText("");
				return;
			}
		} catch (Exception e1) {
			e1.printStackTrace();
			AddedOperator
					.log("搜索失败:" + e1.getMessage(), IreportConstant.ERROR_);
			return;
		}

		jList1.setModel(new MylistModel(lists));
		if (jList1.getSelectedValue() == null) {
			
		}

		jLabel5.setText("检索到" + (jList1.getModel().getSize()) + "条记录");
	}

	private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:帮助
		JFrame helpFrame = new Help();
		helpFrame.setTitle("帮助");
		it.businesslogic.ireport.util.Misc.centerFrame(helpFrame);
		helpFrame.setVisible(true);
	}


	private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {
		addDate();
	}

	private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {
		
		this.dispose();
	}

	private void removeDate() {
		MyReportProperties.removeProperties(IreportConstant.CLASS_NAME);
		MyReportProperties.removeProperties(IreportConstant.METHOD_NAME);
	}

	private void addDate() {
		if(IreportUtil.isBlank(jTextField2.getText())){
			DialogFactory.showErrorMessageDialog(this, "未选择类", "错误");
			return;
		}
		jbeditor.jTextFieldJBSetFactoryClass.setText(jTextField2.getText()); 
	
		this.setVisible(false);
		this.dispose();
	}

    
    // Variables declaration - do not modify
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration
	static class MylistModel extends AbstractListModel {
		List<String> lists;

		MylistModel(List<String> lists) {
			this.lists = lists;
		}

		public Object getElementAt(int index) {

			return lists.get(index);
		}

		public int getSize() {
			// TODO Auto-generated method stub
			return lists.size();
		}
	}
}
